#!/usr/bin/env python
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
# -*- coding: utf-8 -*-
"""
This script checks for available updates of specific applications
(Jira, Confluence...)

:copyright: (c) 2020 Paolo Bernardi.
:license: GNU AGPL version 3, see LICENSE for more details.
"""

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import json
import os
import re
import smtplib
import sys
from typing import Dict, List, Optional

import atlassian
import requests


# Check whether the settings are in place
try:
    from settings import *
except ModuleNotFoundError:
    print("Please create a settings.py configuration file prior to running the script.")
    print("You may use settings.py-sample as reference.")
    sys.exit(1)


def check_jira_updates(check: Dict[str, str]) -> Optional[Dict[str, str]]:
    """
    Verify if there are updates for the specified Jira Server instance.
    """
    available_str = requests.get(
        "https://my.atlassian.com/download/feeds/current/jira-software.json"
    ).text
    available_match = re.match(r"^downloads\((.*)\)", available_str)
    if len(available_str) > 1:
        available_str = available_match[1]  # type: ignore
    else:
        return None
    available_json = json.loads(available_str)
    available = available_json[0]["version"]
    current_url = os.path.join(check["url"], "rest/api/latest/serverInfo")
    current_json = requests.get(
        current_url, auth=(check["username"], check["password"])
    ).json()
    current = current_json["version"]
    if available != current:
        return {"available": available, "current": current}
    else:
        return None


def check_confluence_updates(check: Dict[str, str]) -> Optional[Dict[str, str]]:
    """
    Verify if there are updates for the specified Confluence Server instance.
    """
    available_str = requests.get(
        "https://my.atlassian.com/download/feeds/current/confluence.json"
    ).text
    available_match = re.match(r"^downloads\((.*)\)", available_str)
    if len(available_str) > 1:
        available_str = available_match[1]  # type: ignore
    else:
        return None
    available_json = json.loads(available_str)
    available = available_json[0]["version"]
    current_url = os.path.join(
        check["url"], "rest/troubleshooting/1.0/pre-upgrade/info"
    )
    current_json = requests.get(
        current_url, auth=(check["username"], check["password"])
    ).json()
    current_analytics = current_json["instanceData"]["analyticsVersion"]
    current = ".".join(str(int(x)) for x in current_analytics.split("."))
    if available != current:
        return {"available": available, "current": current}
    else:
        return None


def send_email(to: str, subject: str, body: str):
    """
    Send an email using the configuration parameters from settings.py.
    """
    if EMAIL_USE_TLS:
        smtp = smtplib.SMTP_SSL  # type: ignore
    else:
        smtp = smtplib.SMTP  # type: ignore
    with smtp(EMAIL_HOST, EMAIL_PORT) as server:
        server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = EMAIL_FROM
        message.attach(MIMEText(body, "plain"))
        message["To"] = to
        server.sendmail(EMAIL_FROM, to, message.as_string())


def notify_update(
    check: Dict[str, str], update: Dict[str, str], jira_key: Optional[str]
):
    """
    Notify an available update.
    """
    app = check["name"]
    body = f"""There is a new update for {check["name"]}:

Current version: {update["current"]}
New version: {update["available"]}"""
    if jira_key:
        jira_url = os.path.join(JIRA["url"], "browse", jira_key)
        body += f"""
Jira link: {jira_url}"""
    else:
        body += """
Jira ticket creation went wrong."""
    body += """

--
Update Check"""
    send_email(
        EMAIL_TO, f"{check['name']} update available", body,
    )


def add_jira_ticket(check: Dict[str, str], update: Dict[str, str]) -> str:
    """
    Add a Jira ticket to track the update.
    """
    summary = f"Update {check['name']} to {update['available']}."
    fields = {
        "issuetype": {"name": check["jira_issue_type"]},
        "description": summary,
        "project": {"key": check["jira_project"]},
        "summary": summary,
        "assignee": {"name": check["jira_assigned_to"]},
    }
    for key, value in check.items():
        if key.startswith("jira_customfield"):
            field_name = key[5:]  # Remove the "jira_" prefix
            fields[field_name] = {"value": value}
    jira = atlassian.Jira(
        url=JIRA["url"], username=JIRA["username"], password=JIRA["password"]
    )
    result = jira.issue_create(fields)
    return result["key"]


def check_updates(updates_to_check: List[Dict[str, str]]):
    """Performs all configured updates check."""
    for check in updates_to_check:
        if check["type"] == "jira":
            update = check_jira_updates(check)
        elif check["type"] == "confluence":
            update = check_confluence_updates(check)
        else:
            continue
        if update:
            jira_key = None  # type: Optional[str]
            try:
                jira_key = add_jira_ticket(check, update)
            except:
                pass
            notify_update(check, update, jira_key)


if __name__ == "__main__":
    check_updates(UPDATES_TO_CHECK)
